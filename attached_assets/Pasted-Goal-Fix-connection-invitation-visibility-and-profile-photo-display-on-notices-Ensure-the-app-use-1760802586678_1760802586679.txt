Goal: Fix connection invitation visibility and profile photo display on /notices.
Ensure the app uses connection_invitations consistently and joins user photos from users table via Supabase (with RLS policies).

1. Align table naming

Search the repo for .from("invitations") and .from("connection_requests").

Replace all of them with .from("connection_invitations").

Verify that connection_invitations has columns:

id, sender_id, recipient_id, status, message, created_at, responded_at


Update InvitationActions and /api/invitations/... routes to use connection_invitations.

2. Enable RLS and policies on connection_invitations

Run in Supabase SQL editor if not done yet:

grant usage on schema public to anon, authenticated;
grant select, insert, update, delete on public.connection_invitations to anon, authenticated;

alter table public.connection_invitations enable row level security;

create policy if not exists "inv_read"
on public.connection_invitations for select
using (auth.uid() = sender_id or auth.uid() = recipient_id);

create policy if not exists "inv_insert"
on public.connection_invitations for insert
with check (auth.uid() = sender_id and sender_id <> recipient_id);

create policy if not exists "inv_update"
on public.connection_invitations for update
using (auth.uid() = sender_id or auth.uid() = recipient_id)
with check (auth.uid() = sender_id or auth.uid() = recipient_id);

notify pgrst, 'reload schema';

3. Fix /notices query

In app/(dashboard)/notices/page.tsx, replace any old query with:

const { data: invites } = await supabase
  .from("connection_invitations")
  .select(`
    id,
    message,
    status,
    created_at,
    sender:sender_id (
      id,
      full_name,
      avatar_url
    )
  `)
  .eq("recipient_id", user.id)
  .eq("status", "pending")
  .order("created_at", { ascending: false });


This nested select automatically fetches sender profile data (photo + name) from users.

If you don’t see photos, confirm the users table has an avatar_url column and that anon, authenticated roles can select it:

grant select on public.users to anon, authenticated;
alter table public.users enable row level security;
create policy if not exists "user_read_public"
on public.users for select using (true);

4. UI adjustments

Use <Image src={sender.avatar_url || "/default-avatar.png"} ... unoptimized />.

If the sender’s image field is null, show a fallback avatar.

Make sure the notices card shows sender.full_name and the Accept/Reject buttons trigger the correct Supabase API routes (/api/connection_invitations/[id]/accept).

5. Test flow

Sign in as User A → click “Connect” on User B’s profile → record appears in connection_invitations.

Sign in as User B → go to /notices → should now see the card with A’s name and photo.

Click Accept:

Invitation status → accepted

New row in connections

Notification inserted for A

Click Reject on another → status → rejected

Ensure no 404 or RLS errors appear.

6. Summary to document

Add to replit.md:

Table used: connection_invitations

Policies: sender/recipient read & write

Joins: sender:sender_id (id, full_name, avatar_url)

RLS is enabled; only sender and recipient can view

/notices now shows invites + avatars with Accept/Reject buttons